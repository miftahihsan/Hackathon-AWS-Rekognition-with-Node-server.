{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\src\\\\components\\\\ChatBot.jsx\";\nimport React, { Component } from 'react';\nimport fire from 'firebase';\nimport Webcam from \"react-webcam\";\n\nvar ChatBot =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatBot, _Component);\n\n  _createClass(ChatBot, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.callApi().then(function (res) {\n        return _this2.setState({\n          response: res.express\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }]);\n\n  function ChatBot() {\n    var _this;\n\n    _classCallCheck(this, ChatBot);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatBot).call(this));\n    _this.state = {\n      response: '',\n      post: '',\n      responseToPost: ''\n    };\n    _this.callApi =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/api/hello');\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              body = _context.sent;\n\n              if (!(response.status !== 200)) {\n                _context.next = 8;\n                break;\n              }\n\n              throw Error(body.message);\n\n            case 8:\n              return _context.abrupt(\"return\", body);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e) {\n        var response, body;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                e.preventDefault();\n                _context2.next = 3;\n                return fetch('/api/world', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    post: _this.state.post\n                  })\n                });\n\n              case 3:\n                response = _context2.sent;\n                _context2.next = 6;\n                return response.text();\n\n              case 6:\n                body = _context2.sent;\n\n                _this.setState({\n                  responseToPost: body\n                });\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.setRef = function (webcam) {\n      _this.webcam = webcam;\n    };\n\n    _this.capture = function () {\n      var imageSrc = _this.webcam.getScreenshot(); // f();\n\n\n      _this.getMood(imageSrc);\n    };\n\n    _this.logOut = _this.logOut.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.sendData = _this.sendData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      response: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(ChatBot, [{\n    key: \"logOut\",\n    value: function logOut() {\n      fire.auth().signOut();\n    }\n  }, {\n    key: \"sendData\",\n    value: function sendData(ev) {\n      var _this3 = this;\n\n      ev.preventDefault();\n      var data = \"SENT PROPERLY\";\n      fetch('http://localhost:4000/api/hello', {\n        method: 'POST',\n        body: data\n      }).then(function (response) {\n        response.json().then(function (body) {\n          _this3.setState({\n            response: \"done\"\n          });\n        });\n      });\n    }\n  }, {\n    key: \"getMood\",\n    value: function getMood(imageData) {\n      var AWS = require('aws-sdk');\n\n      AWS.config.loadFromPath('./config.json');\n      AWS.config.update({\n        region: 'us-east-1'\n      });\n\n      var uuid = require('uuid');\n\n      var params = {\n        Attributes: [\"ALL\"],\n        Image: {\n          S3Object: {\n            Bucket: \"get-schwifty-fedb0335-6715-4913-b4f7-cc0800e7ae56\",\n            Name: \"photo.jpg\"\n          }\n        }\n      };\n      var rekognition = new AWS.Rekognition();\n      rekognition.detectFaces(params, function (err, data) {\n        if (err) console.log(err, err.stack); // an error occurred\n        else console.log(data);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Webcam, {\n        style: {\n          display: 'none'\n        },\n        audio: false,\n        height: 350,\n        ref: this.setRef,\n        screenshotFormat: \"image/jpeg\",\n        width: 350,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), this.state.response, React.createElement(\"button\", {\n        onClick: this.capture,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Play a song \"), React.createElement(\"button\", {\n        onClick: this.sendData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"SEND DATA \"), React.createElement(\"button\", {\n        onClick: this.logOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"logout\"));\n    }\n  }]);\n\n  return ChatBot;\n}(Component);\n\nexport default ChatBot;","map":{"version":3,"sources":["C:\\Users\\DELL\\Desktop\\prog\\BUET Hackathon 2019\\getSchwifty\\src\\components\\ChatBot.jsx"],"names":["React","Component","fire","Webcam","ChatBot","callApi","then","res","setState","response","express","catch","err","console","log","state","post","responseToPost","fetch","json","body","status","Error","message","handleSubmit","e","preventDefault","method","headers","JSON","stringify","text","setRef","webcam","capture","imageSrc","getScreenshot","getMood","logOut","bind","sendData","auth","signOut","ev","data","imageData","AWS","require","config","loadFromPath","update","region","uuid","params","Attributes","Image","S3Object","Bucket","Name","rekognition","Rekognition","detectFaces","stack","display"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport fire from 'firebase';\r\nimport Webcam from \"react-webcam\";\r\n\r\n\r\nclass ChatBot extends Component {\r\n\r\n    state = {\r\n        response: '',\r\n        post: '',\r\n        responseToPost: '',\r\n    };\r\n    componentDidMount() {\r\n        this.callApi()\r\n            .then(res => this.setState({ response: res.express }))\r\n            .catch(err => console.log(err));\r\n    }\r\n    callApi = async () => {\r\n        const response = await fetch('/api/hello');\r\n        const body = await response.json();\r\n        if (response.status !== 200) throw Error(body.message);\r\n        return body;\r\n    };\r\n    handleSubmit = async e => {\r\n        e.preventDefault();\r\n        const response = await fetch('/api/world', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ post: this.state.post }),\r\n        });\r\n        const body = await response.text();\r\n        this.setState({ responseToPost: body });\r\n    };\r\n\r\n  constructor(){\r\n    super();\r\n      this.logOut = this.logOut.bind(this);\r\n      this.sendData = this.sendData.bind(this);\r\n      this.state = {\r\n        response: \"\"\r\n      }\r\n  }\r\n\r\n\r\n  logOut(){\r\n    fire.auth().signOut();\r\n  }\r\n\r\n  setRef = webcam => {\r\n    this.webcam = webcam;\r\n  };\r\n\r\n  capture = () => {\r\n      const imageSrc = this.webcam.getScreenshot();\r\n     // f();\r\n      this.getMood(imageSrc);\r\n\r\n  };\r\n\r\n  sendData(ev){\r\n    ev.preventDefault();\r\n\r\n    const data = \"SENT PROPERLY\";\r\n\r\n    fetch('http://localhost:4000/api/hello', {\r\n        method: 'POST',\r\n        body: data\r\n    }).then(response => {\r\n        response.json().then(body => {\r\n            this.setState({response: `done`});\r\n        });\r\n    });\r\n    }\r\n\r\n  getMood(imageData){\r\n    const AWS = require('aws-sdk');\r\n    AWS.config.loadFromPath('./config.json');\r\n    AWS.config.update({region:'us-east-1'});\r\n    const uuid = require('uuid');\r\n    const params = {\r\n        Attributes: [ \"ALL\" ],\r\n        Image: {\r\n            S3Object: {\r\n                Bucket: \"get-schwifty-fedb0335-6715-4913-b4f7-cc0800e7ae56\",\r\n                Name: \"photo.jpg\"\r\n            }\r\n        }\r\n      };\r\n\r\n\r\n    const rekognition = new AWS.Rekognition();\r\n    rekognition.detectFaces(params, function (err,data) {if (err) console.log(err, err.stack); // an error occurred\r\n    else     console.log(data);        });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n   return (\r\n\r\n    <div >\r\n    <Webcam\r\n        style={{display: 'none'}}\r\n        audio={false}\r\n        height={350}\r\n        ref={this.setRef}\r\n        screenshotFormat=\"image/jpeg\"\r\n        width={350}\r\n    />\r\n        {this.state.response}\r\n    <button onClick={this.capture}>Play a song </button>\r\n    <button onClick={this.sendData}>SEND DATA </button>\r\n      <button onClick = {this.logOut} >logout</button>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default ChatBot;\r\n"]},"metadata":{},"sourceType":"module"}