{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\prog\\\\BUET Hackathon 2019\\\\getSchwifty\\\\src\\\\components\\\\ChatBot.jsx\";\nimport React, { Component } from 'react';\nimport fire from 'firebase';\nimport Webcam from \"react-webcam\";\nimport Songs from './songs.json';\nimport SpeechRecognition from 'react-speech-recognition';\nvar myRecognition = new (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition)();\nmyRecognition.continous = true;\nmyRecognition.interimResults = true;\nmyRecognition.lang = 'en-US';\n\nvar ChatBot =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatBot, _Component);\n\n  _createClass(ChatBot, [{\n    key: \"toggleListen\",\n    value: function toggleListen() {\n      this.setState({\n        listening: !this.state.listening\n      }, this.handleListen);\n    }\n  }, {\n    key: \"handleListen\",\n    value: function handleListen() {\n      var _this2 = this;\n\n      try {\n        if (this.state.listening) myRecognition.start();\n      } catch (err) {\n        console.log(\"ERROE\");\n      }\n\n      var final = '';\n\n      myRecognition.onresult = function (event) {\n        var interim = '';\n\n        for (var _i = event.resultIndex; _i < event.results.length; _i++) {\n          var transcript = event.results[_i][0].transcript;\n          if (event.results[_i].isFinal) final += transcript + ' ';else interim += transcript;\n        } // document.getElementById('interim').innerHTML = interim\n        // document.getElementById('final').innerHTML = final\n\n\n        document.getElementById('myTextBox').value = interim;\n\n        _this2.setState({\n          myText: final\n        });\n      }; // handle speech recognition here\n\n    }\n  }, {\n    key: \"dataPreProcess\",\n    value: function dataPreProcess(e) {\n      var wordArray = this.state.myText.trim().split(\" \");\n      var count = 0;\n      var found = false;\n\n      for (var _i2 = 0; _i2 < wordArray.length; _i2++) {\n        var currrWord = wordArray[_i2].toLowerCase();\n\n        if (currrWord == \"play\") {\n          count = count + 1;\n        } else if (currrWord == \"song\" || currrWord == \"songs\") {\n          count = count + 1;\n        }\n\n        if (count == 2) {\n          found = true;\n          this.handleSubmit();\n          break;\n        }\n      }\n\n      if (found) {\n        console.log(\"PLAY SONG NOW!!!!!!\");\n        this.capture();\n        return;\n      }\n      /*\r\n              var songName = \"\";\r\n              let wordIndex = this.state.myText.trim().split(\" \");\r\n      \r\n      \r\n              var lyricFoundFlag = false;\r\n              var  i = 0;\r\n      \r\n              while(i < wordIndex.length ){\r\n      \r\n                  if(wordIndex[i++].includes(\"lyric\")) {\r\n                      lyricFoundFlag = true;\r\n      \r\n                      if(wordIndex[i] == \"for\" || wordIndex[i] == \"of\") {\r\n                          i++;\r\n                      }\r\n                  }\r\n      \r\n                  if(lyricFoundFlag && wordIndex[i] != null) {\r\n                      songName += \" \" + wordIndex[i];\r\n                  }\r\n              }\r\n      */\n\n\n      var artist = this.fetchSongArtist(this.state.myText);\n      var title = this.fetchSongTitle(this.state.myText);\n      this.setState({\n        searchSong: artist + \"^\" + title\n      }, function () {\n        this.handleLyricsSearch();\n      });\n    }\n  }, {\n    key: \"fetchSongArtist\",\n    value: function fetchSongArtist(input) {\n      var wordIndex;\n\n      if (input.includes(\"-\")) {\n        wordIndex = input.trim().split(\"-\");\n      } else if (input.includes(\"by\")) {\n        wordIndex = input.trim().split(\"by\");\n      } else {\n        return \"\";\n      }\n\n      return wordIndex[wordIndex.length - 1];\n    }\n  }, {\n    key: \"fetchSongTitle\",\n    value: function fetchSongTitle(input) {\n      var songName = \"\";\n      var formattedInput;\n      var tempArray;\n\n      if (input.includes(\"-\")) {\n        tempArray = input.trim().split(\"-\");\n        formattedInput = tempArray[0];\n      } else if (input.includes(\"by\")) {\n        wordIndex = input.trim().split(\"by\");\n        formattedInput = tempArray[0];\n      } else {\n        formattedInput = input;\n      }\n\n      var wordIndex = formattedInput.trim().split(\" \");\n      var lyricFoundFlag = false;\n      i = 0;\n\n      while (i < wordIndex.length) {\n        if (wordIndex[i++].includes(\"lyric\")) {\n          lyricFoundFlag = true;\n\n          if (wordIndex[i] == \"for\" || wordIndex[i] == \"of\") {\n            i++;\n          }\n        }\n\n        if (lyricFoundFlag && wordIndex[i] != null) {\n          songName += \" \" + wordIndex[i];\n        }\n      }\n\n      console.log(songName);\n      return songName;\n      console.log();\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      e.preventDefault();\n      this.setState({\n        myText: e.target.value\n      });\n    }\n  }]);\n\n  function ChatBot() {\n    var _this;\n\n    _classCallCheck(this, ChatBot);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatBot).call(this));\n    _this.state = {\n      response: '',\n      post: '',\n      responseToPost: ''\n    };\n    _this.handleSubmit =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, body, song;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                responseToPost: \"Loading...\"\n              });\n\n              _context.next = 3;\n              return fetch('http://localhost:4000/api/play', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  post: _this.state.post\n                })\n              });\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.text();\n\n            case 6:\n              body = _context.sent;\n\n              _this.setState({\n                responseToPost: \"Here is a \" + body + \" music \"\n              });\n\n              _this.setState({\n                songResponse: \"Now playing \" + _this.state.song + \" By \" + _this.state.artist\n              });\n\n              song = 0;\n\n              if (body == \"HAPPY\") {\n                song = Songs.HappySongs[3];\n              } else {\n                song = Songs.SadSongs[4];\n              }\n\n              console.log(song);\n\n              _this.setState({\n                song: song.Name\n              });\n\n              _this.setState({\n                url: song.URL\n              });\n\n              _this.setState({\n                artist: song.artist\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    _this.handleLyricsSearch =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var response, body;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this.setState({\n                responseToPost: \"Loading...\"\n              });\n\n              console.log(_this.state.searchSong);\n              _context2.next = 4;\n              return fetch('http://localhost:4000/api/lyrics', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  post: _this.state.searchSong\n                })\n              });\n\n            case 4:\n              response = _context2.sent;\n              _context2.next = 7;\n              return response.text();\n\n            case 7:\n              body = _context2.sent;\n\n              _this.setState({\n                responseToPost: body\n              });\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    _this.setRef = function (webcam) {\n      _this.webcam = webcam;\n    };\n\n    _this.capture = function () {\n      var imageSrc = _this.webcam.getScreenshot();\n\n      _this.setState({\n        post: imageSrc\n      }, function () {\n        this.handleSubmit();\n      }); // f();\n\n    };\n\n    _this.logOut = _this.logOut.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      response: \"\",\n      songResponse: \"\",\n      song: \"\",\n      artist: \"\",\n      url: \"\",\n      searchSong: \"\",\n      myText: \"\"\n    };\n    _this.logOut = _this.logOut.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleListen = _this.toggleListen.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleListen = _this.handleListen.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.dataPreProcess = _this.dataPreProcess.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fetchSongArtist = _this.fetchSongArtist.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fetchSongTitle = _this.fetchSongTitle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ChatBot, [{\n    key: \"logOut\",\n    value: function logOut() {\n      fire.auth().signOut();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, React.createElement(Webcam, {\n        audio: false,\n        height: 350,\n        ref: this.setRef,\n        screenshotFormat: \"image/jpeg\",\n        width: 350,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"myTextBox\",\n        type: \"text\",\n        name: \"myText\",\n        placeholder: \"Enter Text Here\",\n        value: this.state.myText,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.dataPreProcess,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, \"submit\")), React.createElement(\"button\", {\n        id: \"microphone-btn\",\n        onClick: this.toggleListen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, \"MIC\"), this.state.response, React.createElement(\"a\", {\n        href: this.state.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, this.state.responseToPost, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, this.state.songResponse)));\n    }\n  }]);\n\n  return ChatBot;\n}(Component);\n\nexport default ChatBot;","map":{"version":3,"sources":["C:\\Users\\DELL\\Desktop\\prog\\BUET Hackathon 2019\\getSchwifty\\src\\components\\ChatBot.jsx"],"names":["React","Component","fire","Webcam","Songs","SpeechRecognition","myRecognition","window","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","continous","interimResults","lang","ChatBot","setState","listening","state","handleListen","start","err","console","log","final","onresult","event","interim","i","resultIndex","results","length","transcript","isFinal","document","getElementById","value","myText","e","wordArray","trim","split","count","found","currrWord","toLowerCase","handleSubmit","capture","artist","fetchSongArtist","title","fetchSongTitle","searchSong","handleLyricsSearch","input","wordIndex","includes","songName","formattedInput","tempArray","lyricFoundFlag","preventDefault","target","response","post","responseToPost","fetch","method","headers","body","JSON","stringify","text","songResponse","song","HappySongs","SadSongs","Name","url","URL","setRef","webcam","imageSrc","getScreenshot","logOut","bind","toggleListen","dataPreProcess","handleChange","auth","signOut"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport fire from 'firebase';\r\nimport Webcam from \"react-webcam\";\r\nimport Songs from './songs.json';\r\nimport SpeechRecognition from 'react-speech-recognition';\r\n\r\n\r\nvar myRecognition = new (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition)();\r\n\r\n\r\nmyRecognition.continous = true;\r\nmyRecognition.interimResults = true;\r\nmyRecognition.lang = 'en-US';\r\n\r\n\r\nclass ChatBot extends Component {\r\n\r\n    state = {\r\n        response: '',\r\n        post: '',\r\n        responseToPost: ''\r\n    };\r\n\r\n    toggleListen() {\r\n        this.setState({\r\n            listening: !this.state.listening\r\n        }, this.handleListen)\r\n    }\r\n\r\n\r\n    handleListen(){\r\n        try{\r\n            if (this.state.listening) myRecognition.start();\r\n        }\r\n        catch(err){\r\n            console.log(\"ERROE\");\r\n        }\r\n\r\n        let final = '';\r\n        myRecognition.onresult = event => {\r\n            let interim = ''\r\n            for (let i = event.resultIndex; i < event.results.length; i++) {\r\n                const transcript = event.results[i][0].transcript;\r\n                if (event.results[i].isFinal) final += transcript + ' ';\r\n                else interim += transcript;\r\n            }\r\n            // document.getElementById('interim').innerHTML = interim\r\n            // document.getElementById('final').innerHTML = final\r\n            document.getElementById('myTextBox').value = interim\r\n            this.setState({myText: final})\r\n        }\r\n        // handle speech recognition here\r\n    }\r\n\r\n    dataPreProcess(e){\r\n        var wordArray = this.state.myText.trim().split(\" \");\r\n        var count = 0;\r\n        var found = false;\r\n\r\n        for(let i = 0; i<wordArray.length; i++){\r\n            const currrWord = wordArray[i].toLowerCase();\r\n            if(currrWord == \"play\"){\r\n                count = count + 1;\r\n            }\r\n            else if(currrWord == \"song\" || currrWord == \"songs\"){\r\n                count = count + 1\r\n            }\r\n\r\n            if(count==2){\r\n                found = true;\r\n                this.handleSubmit();\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(found){\r\n            console.log(\"PLAY SONG NOW!!!!!!\");\r\n            this.capture();\r\n            return;\r\n        }\r\n/*\r\n        var songName = \"\";\r\n        let wordIndex = this.state.myText.trim().split(\" \");\r\n\r\n\r\n        var lyricFoundFlag = false;\r\n        var  i = 0;\r\n\r\n        while(i < wordIndex.length ){\r\n\r\n            if(wordIndex[i++].includes(\"lyric\")) {\r\n                lyricFoundFlag = true;\r\n\r\n                if(wordIndex[i] == \"for\" || wordIndex[i] == \"of\") {\r\n                    i++;\r\n                }\r\n            }\r\n\r\n            if(lyricFoundFlag && wordIndex[i] != null) {\r\n                songName += \" \" + wordIndex[i];\r\n            }\r\n        }\r\n*/\r\n        var artist = this.fetchSongArtist(this.state.myText);\r\n        var title = this.fetchSongTitle(this.state.myText);\r\n        \r\n        this.setState({searchSong: artist + \"^\" + title}, function () {\r\n            this.handleLyricsSearch();\r\n        });\r\n\r\n\r\n    }\r\n     fetchSongArtist(input) {\r\n\r\n        var wordIndex;\r\n\r\n        if (input.includes(\"-\")) {\r\n            wordIndex = input.trim().split(\"-\");\r\n        } else if (input.includes(\"by\")) {\r\n            wordIndex = input.trim().split(\"by\");\r\n        } else {\r\n            return \"\";\r\n        }\r\n\r\n        return wordIndex[wordIndex.length-1];\r\n    }\r\n\r\n     fetchSongTitle (input) {\r\n        var songName = \"\";\r\n        var formattedInput;\r\n        var tempArray;\r\n\r\n        if (input.includes(\"-\")) {\r\n            tempArray = input.trim().split(\"-\");\r\n            formattedInput = tempArray[0];\r\n        } else if (input.includes(\"by\")) {\r\n            wordIndex = input.trim().split(\"by\");\r\n            formattedInput = tempArray[0];\r\n\r\n        } else {\r\n            formattedInput = input;\r\n        }\r\n\r\n        let wordIndex = formattedInput.trim().split(\" \");\r\n\r\n\r\n\r\n        var lyricFoundFlag = false;\r\n        i = 0;\r\n\r\n        while(i < wordIndex.length ){\r\n\r\n            if(wordIndex[i++].includes(\"lyric\")) {\r\n                lyricFoundFlag = true;\r\n\r\n                if(wordIndex[i] == \"for\" || wordIndex[i] == \"of\") {\r\n                    i++;\r\n                }\r\n            }\r\n\r\n\r\n            if(lyricFoundFlag && wordIndex[i] != null) {\r\n                songName += \" \" + wordIndex[i];\r\n            }\r\n        }\r\n\r\n        console.log(songName);\r\n\r\n        return songName;\r\n\r\n\r\n\r\n\r\n\r\n        console.log();\r\n\r\n    }\r\n\r\n    handleChange(e){\r\n        e.preventDefault();\r\n        this.setState({myText: e.target.value})\r\n    }\r\n\r\n\r\n\r\n\r\n    handleSubmit = async () => {\r\n        this.setState({responseToPost: \"Loading...\"});\r\n        const response = await fetch('http://localhost:4000/api/play', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ post: this.state.post }),\r\n        });\r\n\r\n        const body = await response.text();\r\n        this.setState({ responseToPost: \"Here is a \"+ body + \" music \" });\r\n        this.setState({ songResponse: \"Now playing \" + this.state.song + \" By \" + this.state.artist });\r\n\r\n        let song=0;\r\n        if (body==\"HAPPY\"){\r\n            song = Songs.HappySongs[3];\r\n        }\r\n        else{\r\n            song = Songs.SadSongs[4];\r\n        }\r\n        console.log(song)\r\n        this.setState({ song: song.Name});\r\n        this.setState({ url: song.URL});\r\n        this.setState({ artist: song.artist});\r\n\r\n    };\r\n\r\n    handleLyricsSearch = async() =>{\r\n        this.setState({responseToPost: \"Loading...\"});\r\n        console.log(this.state.searchSong);\r\n        const response = await fetch('http://localhost:4000/api/lyrics',{\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ post: this.state.searchSong}),\r\n        });\r\n        const body = await response.text();\r\n        this.setState({ responseToPost: body});\r\n\r\n    };\r\n\r\n  constructor(){\r\n    super();\r\n      this.logOut = this.logOut.bind(this);\r\n      this.state = {\r\n        response: \"\",\r\n        songResponse: \"\",\r\n        song: \"\",\r\n        artist: \"\",\r\n          url: \"\",\r\n          searchSong:\"\",\r\n          myText: \"\"\r\n\r\n      }\r\n      this.logOut = this.logOut.bind(this);\r\n      this.toggleListen = this.toggleListen.bind(this);\r\n      this.handleListen = this.handleListen.bind(this);\r\n      this.dataPreProcess = this.dataPreProcess.bind(this);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.fetchSongArtist = this.fetchSongArtist.bind(this);\r\n      this.fetchSongTitle = this.fetchSongTitle.bind(this);\r\n\r\n\r\n  }\r\n\r\n\r\n  logOut(){\r\n    fire.auth().signOut();\r\n  }\r\n\r\n  setRef = webcam => {\r\n    this.webcam = webcam;\r\n  };\r\n\r\n  capture =  () => {\r\n      const imageSrc = this.webcam.getScreenshot();\r\n\r\n      this.setState({post: imageSrc}, function () {\r\n          this.handleSubmit();\r\n      });\r\n     // f();\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n   return (\r\n\r\n    <div >\r\n    <Webcam\r\n        audio={false}\r\n        height={350}\r\n        ref={this.setRef}\r\n        screenshotFormat=\"image/jpeg\"\r\n        width={350}\r\n    />\r\n        <form>\r\n            <input id=\"myTextBox\" type=\"text\" name=\"myText\" placeholder=\"Enter Text Here\" value={this.state.myText} onChange={this.handleChange} />\r\n            <button type=\"button\" onClick={this.dataPreProcess}>submit</button>\r\n        </form>\r\n\r\n        <button id='microphone-btn' onClick={this.toggleListen} >MIC</button>\r\n\r\n        {this.state.response}\r\n\r\n\r\n        <a href={this.state.url}>\r\n        <p>{this.state.responseToPost} </p>\r\n        <p>{this.state.songResponse}</p>\r\n        </a>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default ChatBot;\r\n"]},"metadata":{},"sourceType":"module"}